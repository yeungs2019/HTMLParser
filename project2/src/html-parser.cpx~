#include "html-parser.hpp"
#include <fstream>
#include <string>
#include <stack>
#include <iostream>
#include <istream>
#include <vector>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

// constructor (initialize)
HTMLParser::HTMLParser() {
    mSize = 0;
    mLinkPos = 0;
    count = 0;
    mSize = 0;
    mFileSize = 0;
}

// free memory (deallocate)
HTMLParser::~HTMLParser() {
    //bTag.clear();
    //aTag.clear();
    //eTag.clear();
    link.clear();
    numLink.clear();
    visited.clear();
    knowName.clear();
    isB.clear();
}

// checks if balanced
bool HTMLParser::isBalanced(std::string filename) {
   return false; 
}

// parse through 
void  HTMLParser::parse(std::string filename) {
    // read text from file
    std::ifstream input(filename);
    //generic holder for characters;
    //char ch;
    // creates a text string, tis inside the angle brackets
    std::string myText = "";
    // creates a tag string, this is the tags
    std::string tagMe = "";
    // counter to hold a truth
    bool pointer = false;
    // we push things onto the stack
    if(input.open){
	while(!input.eof()){
	     /*if(ch == '<'){
	        // check for the slash and get ready to pop	    
	        if(input.peek() == '/'){
		    getline(input, myText); // do i need to include >?
		    eTag.push(myText);
                }
	        // anchor tag check
	        else if(input.peek() == 'a'){
		    getline(input, myText);
		    aTag.push(myText);
	        }
	        // all other text after <
	        else{
		    getline(input, myText);
		    bTag.push(myText);
	        }
  	    }*/
    	    getline(input, myText);
	    for(int i = 0; i < input.size(); i++){
		if(myText[i] == '<'){
		    pointer = true;
		}
		else if(myText[i] == '>'){
		    return;
		}
	    }
        }
        input.close();
    }
}
    // we now start popping things off of the stack and compare recent push
    /*if(eTag.empty() || aTag.empty() || bTag.empty()){
	return false;
    }
    while(input.get(ch)){
	if(input.peek() == '>'){
	    aTag.pop();
	}
	if(input.peek() == '/'){
	    eTag.pop();
	}
    }
    input.close();*/

    /*std::string str = "<html>";
    std::string str2 = "<body>";
    std::string str3 = "<b>";
    std::string str4 = "<a>";
  
    char* h = const_cast<char*>(str.c_str());
    char* b = const_cast<char*>(str2.c_str());
    char* p = const_cast<char*>(str3.c_str());
    char* a = const_cast<char*>(str4.c_str());
    
    while(input.get(ch)){*/

    //iterate the file
    /*for(int i = 0; i < filename.length(); i++){
	if(filename[i] == 'c' || filename[i] == 'b' || filename[i] == 'p'
	     || filename[i] == 'a'){
		tags.push(filename[i]);
	}
	if(tags.empty()){
	    return false;
	}
	switch(filename[i]){
	    case 'h':
		ch = tags.top();
		tags.pop();
		if(ch == 'a' || ch == 'p' || ch == 'b'){
		    return false;
		    break;
		}
	    case 'b':
		ch = tags.top();
		tags.pop();
		if(ch == 'a' || ch == 'p' || ch == 'h'){
		    return false;
		    break;
		}
	    case 'p':
		ch = tags.top();
		tags.pop();
		if(ch == 'a' || ch == 'b' || ch == 'h'){
		    return false;
		    break;
		}
	    case 'a':
		ch = tags.top();
		tags.pop();
		if(ch == 'b' || ch == 'h' || ch == 'p'){
		    return false;
		    break;
		}

	}

    }
   
    return (tags.empty());*/


// recursion
int HTMLParser::pageVisitAmount(std::string filename) {
    count = 0;
    visited.clear();
    return pageHelp(filename);;
}
int HTMLParser::pageHelp(std::string filename){
    bool lExists = false;
    bool cExists = false;
    for(int i = 0; i < knowName.size(); i++){
	if(knowName.at(i) == filename){
	    mLinkPos = i;
	    cExists = true;
	}
    }
    if(cExists = false){
	return count; // already initialized to 0
    }
    // for files that already have been 
    for(int k = 0; k < visited.size(); k++){
	if(visited.at(k) == filename){
	    return count;
	}
    }
    // keeps track of visited file
    visited.push_back(filename);
    int startPos;
    int size = 0;

    // balancing base case
    if(isB.at(mLinkPos) == false){
	return count;
    }
    // finds number of links within the file
    if(mLinkPos == 0){
	size = numLink.at(mLinkPos);
	if(size != 0){
	    startPos = 0;
	    for(int k = startPos; k < (startPos + size); k++){
		for(int j = 0; j < knowName.size(); j++){
		    if(link.at(k) == knowName.at(j)){
			lExists = true;
		    }
		}
		if(lExists == true){
		    count += 1;
		    pageHelp(link.at(k));
		}
		lExists = false;
	    }
	}
    }
    else{
	size = (numLink.at(mLinkPos) - numLink.at(mLinkPos - 1));
	if(size != 0){
	    startPos = numLink.at(mLinkPos) - size;
	    for(int k = startPos; k < (startPos + size); k++){
		for(int j = 0; j < knowName.size(); j++){
	 	    if(link.at(k) == knowName.at(j)){
			lExists = true;
		    }
		}
		if(lExists = true){
		    count += 1;
		    pageHelp(link.at(k));
		}
		lExists = false;
	     } 
	 }
    }
    return count;
}
